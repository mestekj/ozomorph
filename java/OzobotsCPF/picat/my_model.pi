import cp.



% Classic+robustness
find_plans(Problem) = Plans =>
    AgentsNumber = Problem.agents_count(),
    % TODO MAX_LEN = horni odhad na delku planu
    MAX_LEN = Problem.vertices_count() * Problem.agents_count(),
    member(Makespan, 1..MAX_LEN),

    VerticesNumber = Problem.vertices_count(),
    B = new_array(Makespan+1,AgentsNumber,VerticesNumber),
    B::0..1,

    foreach (Group in Problem.groups)
        % Initial positions
        Initials = Group.initials,
        foreach (Agent in Group.agents)
            V = Group.initialPosition(Agent),
            B[1,Agent,V] = 1
        end,

        % Target positions - each target position is occupied by an agent
        foreach (V in Group.targets)
            sum([B[Makespan+1,Agent,V] : Agent in Group.agents]) #= 1
        end,
    end,

    % Each agent occupies exactly one vertex at each time
    foreach (Agent in 1..AgentsNumber, Time in 1..Makespan+1)
        sum([B[Time,Agent,V] : V in 1..Problem.vertices_count()]) #= 1
    end,

    % No two agents occupy same vertex
    foreach (Time in 1..Makespan+1, V in 1..Problem.vertices_count())
        sum([B[Time,Agent,V] : Agent in 1..AgentsNumber]) #<= 1
    end,

    % Only transitions to adjacent free vertices are allowed
    foreach (Time in 1..Makespan, Agent in 1..AgentsNumber, V in 1..Problem.vertices_count())
        % Agent can move only to adjacent vertices (including current)
        B[Time,Agent,V] #=>
            sum([B[Time+1,Agent,VN] : (VN,_) in Problem.neighboursDir(V)]) #= 1,
        % ROBUSTNESS: For each position of each agent at each time, there was not another agent in time-1
        B[Time+1,Agent,V] #=>
                sum([B[Time,A,V] : A in 1..AgentsNumber, A != Agent]) #= 0,
    end,
    solve(B),
    Plans = output_plan(B,Problem,Makespan).



output_plan(B,Problem, Makespan)=Plans =>
    Plans = [],
    foreach (Group in Problem.groups)
        foreach (Agent in Group.agents)
            Position = Group.initialPosition(Agent),
            Plan = [],
            LastDir = 1, %direction (index in vectors()) of agent at start, TODO property of problem
            foreach (T in 2..Makespan+1)
                Neibs = Problem.neighboursDir(Position),
                member((NextPosition,Direction),Neibs), % find next position by backtracking
                B[T,Agent,NextPosition] =:= 1,
                Plan := Problem.actions(Position,LastDir,NextPosition,Direction) ++ Plan,
                if (Position != NextPosition) then
                    LastDir := Direction,
                end,
                Position := NextPosition,
            end,
            Plans := Plans ++ [reverse(Plan)],
        end,
    end.

/*

neighbours(X,Y,Width,Height) = Neighbours =>
    Neighbours = [],
    foreach ((DX,DY) in vectors())
        NX = X + DX, 
        NY = Y + DY,
        if(between(1, Width, NX) && between(1, Height, NY)) then 
            Neighbours := [(NX,NY) | Neighbours]
        end,
    end.

neighboursDir(X,Y,Width,Height) = Neighbours =>
    Neighbours = [],
    V = vectors(),
    foreach (I in 1..len(V))
        (DX,DY) = V[I],
        NX = X + DX, 
        NY = Y + DY,
        if(between(1, Width, NX) && between(1, Height, NY)) then 
            CI = I, % local copy
            Neighbours := [(NX,NY,CI) | Neighbours]
        end,
    end.

*/


